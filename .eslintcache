[{"C:\\dev\\medsurvey\\src\\index.tsx":"1","C:\\dev\\medsurvey\\src\\AppTheme.ts":"2","C:\\dev\\medsurvey\\src\\serviceWorker.ts":"3","C:\\dev\\medsurvey\\src\\app\\store.ts":"4","C:\\dev\\medsurvey\\src\\App.tsx":"5","C:\\dev\\medsurvey\\src\\Routes.ts":"6","C:\\dev\\medsurvey\\src\\features\\home\\index.ts":"7","C:\\dev\\medsurvey\\src\\features\\patientForm\\index.ts":"8","C:\\dev\\medsurvey\\src\\features\\patientsList\\index.ts":"9","C:\\dev\\medsurvey\\src\\features\\patientsList\\PatientsList.tsx":"10","C:\\dev\\medsurvey\\src\\features\\patientForm\\PatientForm.tsx":"11","C:\\dev\\medsurvey\\src\\features\\home\\Home.tsx":"12","C:\\dev\\medsurvey\\src\\rootSaga.ts":"13","C:\\dev\\medsurvey\\src\\features\\patientForm\\patientFormSlice.ts":"14","C:\\dev\\medsurvey\\src\\features\\patientForm\\constants.ts":"15","C:\\dev\\medsurvey\\src\\features\\patientForm\\selectors.ts":"16","C:\\dev\\medsurvey\\src\\features\\patientForm\\sagas\\rootPatientFormSaga.ts":"17","C:\\dev\\medsurvey\\src\\features\\patientForm\\sagas\\savePatientFormDataSaga.ts":"18","C:\\dev\\medsurvey\\src\\app\\messageControl.ts":"19","C:\\dev\\medsurvey\\src\\features\\patientsList\\PatientDetailsRow.tsx":"20","C:\\dev\\medsurvey\\src\\app\\constants.ts":"21","C:\\dev\\medsurvey\\src\\features\\patientsList\\constants.ts":"22","C:\\dev\\medsurvey\\src\\features\\patientsList\\InfluencingFactorIcon.tsx":"23","C:\\dev\\medsurvey\\src\\app\\utils.ts":"24","C:\\dev\\medsurvey\\src\\features\\patientForm\\patientFormViewSlice.ts":"25","C:\\dev\\medsurvey\\src\\features\\patientsList\\patientsListSlice.ts":"26","C:\\dev\\medsurvey\\src\\features\\patientsList\\sagas\\rootPatientListSaga.ts":"27","C:\\dev\\medsurvey\\src\\features\\patientsList\\sagas\\deletePatientSaga.ts":"28","C:\\dev\\medsurvey\\src\\features\\patientsList\\selectors.ts":"29"},{"size":966,"mtime":1618498136322,"results":"30","hashOfConfig":"31"},{"size":5155,"mtime":1608724446137,"results":"32","hashOfConfig":"31"},{"size":5424,"mtime":499162500000,"results":"33","hashOfConfig":"31"},{"size":857,"mtime":1624297447857,"results":"34","hashOfConfig":"31"},{"size":650,"mtime":1619389151845,"results":"35","hashOfConfig":"31"},{"size":106,"mtime":1616368622132,"results":"36","hashOfConfig":"31"},{"size":52,"mtime":1608721182905,"results":"37","hashOfConfig":"31"},{"size":184,"mtime":1618482554173,"results":"38","hashOfConfig":"31"},{"size":76,"mtime":1608721253381,"results":"39","hashOfConfig":"31"},{"size":4246,"mtime":1626024791420,"results":"40","hashOfConfig":"31"},{"size":69331,"mtime":1626020052766,"results":"41","hashOfConfig":"31"},{"size":1714,"mtime":1608725906198,"results":"42","hashOfConfig":"31"},{"size":380,"mtime":1626017021067,"results":"43","hashOfConfig":"31"},{"size":12928,"mtime":1626019090677,"results":"44","hashOfConfig":"31"},{"size":46,"mtime":1616601135761,"results":"45","hashOfConfig":"31"},{"size":399,"mtime":1619293464393,"results":"46","hashOfConfig":"31"},{"size":341,"mtime":1619293388441,"results":"47","hashOfConfig":"31"},{"size":1579,"mtime":1626020982129,"results":"48","hashOfConfig":"31"},{"size":517,"mtime":1618491692311,"results":"49","hashOfConfig":"31"},{"size":47983,"mtime":1626021077467,"results":"50","hashOfConfig":"31"},{"size":3959,"mtime":1616953191562,"results":"51","hashOfConfig":"31"},{"size":104,"mtime":1624295759564,"results":"52","hashOfConfig":"31"},{"size":904,"mtime":1617035877978,"results":"53","hashOfConfig":"31"},{"size":550,"mtime":1617036054078,"results":"54","hashOfConfig":"31"},{"size":991,"mtime":1619293198553,"results":"55","hashOfConfig":"31"},{"size":1009,"mtime":1626021844991,"results":"56","hashOfConfig":"31"},{"size":306,"mtime":1624297514727,"results":"57","hashOfConfig":"31"},{"size":656,"mtime":1624296735857,"results":"58","hashOfConfig":"31"},{"size":260,"mtime":1626022344751,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"prus7n",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"62"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"62"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"C:\\dev\\medsurvey\\src\\index.tsx",[],["123","124"],"C:\\dev\\medsurvey\\src\\AppTheme.ts",[],"C:\\dev\\medsurvey\\src\\serviceWorker.ts",[],"C:\\dev\\medsurvey\\src\\app\\store.ts",[],"C:\\dev\\medsurvey\\src\\App.tsx",[],"C:\\dev\\medsurvey\\src\\Routes.ts",[],"C:\\dev\\medsurvey\\src\\features\\home\\index.ts",[],"C:\\dev\\medsurvey\\src\\features\\patientForm\\index.ts",[],"C:\\dev\\medsurvey\\src\\features\\patientsList\\index.ts",[],"C:\\dev\\medsurvey\\src\\features\\patientsList\\PatientsList.tsx",["125"],"import React, { FunctionComponent, useState, useEffect, useCallback } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\nimport { Button, Box, Table, Theme, TableContainer, TableHead, TableRow, TableCell, TableBody, TablePagination, TextField, InputAdornment } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\n\r\nimport { Routes } from '../../Routes';\r\n\r\nimport { send } from '../../app/messageControl';\r\n\r\nimport type { PatientData } from '../patientForm';\r\n\r\nimport { PatientDetailsRow } from './PatientDetailsRow';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n\tnavigationButton: {\r\n\t\tpadding: theme.spacing(1),\r\n\t\tmargin: theme.spacing(2)\r\n\t},\r\n\ttable: {\r\n\t\tminWidth: 700,\r\n\t},\r\n\tcontainer: {\r\n\t\theight: '90vh',\r\n\t}\r\n}));\r\n\r\ninterface PatientRecord {\r\n\tid: string,\r\n\tname: string,\r\n\tsurname: string,\r\n\tpatronymic: string,\r\n\tdateOfBirth: string,\r\n\tdateOfAdding: string,\r\n\tsurvey: string\r\n}\r\ninterface PatientsListProps {\r\n}\r\n\r\nexport const PatientsList: FunctionComponent<PatientsListProps> = ({ }: PatientsListProps) => {\r\n\tconst classes = useStyles();\r\n\tconst [page, setPage] = useState(0);\r\n\tconst [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n\tconst [rows, setRows] = useState<PatientData[]>([]);\r\n\r\n\tconst [searchString, setSearchString] = useState<string>('');\r\n\r\n\tconst changeSearchString = useCallback(({ target: { value } }: React.ChangeEvent<{ value: string }>) => {\r\n\t\tsetSearchString(value);\r\n    }, []);\r\n\r\n\tconst handleChangePage = useCallback((event: unknown, newPage: number) => {\r\n\t\tsetPage(newPage);\r\n\t}, []);\r\n\r\n\tconst handleChangeRowsPerPage = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetRowsPerPage(+event.target.value);\r\n\t\tsetPage(0);\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tsend('SELECT * FROM Patients').then(patients => {\r\n\t\t\tconst data = patients as PatientRecord[];\r\n\t\t\tconst rows = data.map(p => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tid: p.id,\r\n\t\t\t\t\tname: p.name,\r\n\t\t\t\t\tsurname: p.surname,\r\n\t\t\t\t\tpatronymic: p.patronymic,\r\n\t\t\t\t\tdateOfBirth: p.dateOfBirth,\r\n\t\t\t\t\tdateOfAdding: p.dateOfAdding,\r\n\t\t\t\t\tsurvey: JSON.parse(p.survey)\r\n\t\t\t\t};\r\n\t\t\t}) as PatientData[];\r\n\t\t\tsetRows(rows);\r\n\t\t});\r\n\t}, []);\r\n\r\n\tconst filteredRows = rows.filter(row =>\r\n\t\t!searchString || (\r\n\t\t\trow.name.toUpperCase().startsWith(searchString.toUpperCase()) ||\r\n\t\t\trow.surname.toUpperCase().startsWith(searchString.toUpperCase())\r\n\t\t));\r\n\treturn (\r\n\t\t<Box>\r\n\t\t\t<Button\r\n                className={classes.navigationButton}\r\n                variant='outlined'\r\n                color='primary'\r\n                component={RouterLink}\r\n                to={Routes.Home}>\r\n                { 'Назад' }\r\n            </Button>\r\n\t\t\t<Box px={2} py={3} width='40%'>\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tlabel='Поиск'\r\n\t\t\t\t\tvariant='outlined'\r\n\t\t\t\t\tfullWidth\r\n\t\t\t\t\tonChange={ changeSearchString }\r\n\t\t\t\t\tInputProps={{\r\n\t\t\t\t\t\tendAdornment: (\r\n\t\t\t\t\t\t\t<InputAdornment position='start' variant='outlined'>\r\n\t\t\t\t\t\t\t\t<SearchIcon />\r\n\t\t\t\t\t\t\t</InputAdornment>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</Box>\r\n\t\t\t<TableContainer className={classes.container}>\r\n\t\t\t\t<Table className={classes.table}\r\n\t\t\t\t\tstickyHeader\r\n\t\t\t\t\taria-label=\"sticky table\">\r\n\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t<TableCell></TableCell>\r\n\t\t\t\t\t\t\t<TableCell>Фамилия</TableCell>\r\n\t\t\t\t\t\t\t<TableCell>Имя</TableCell>\r\n\t\t\t\t\t\t\t<TableCell>Отчество</TableCell>\r\n\t\t\t\t\t\t\t<TableCell>Дата рождения</TableCell>\r\n\t\t\t\t\t\t\t<TableCell>Дата заполнения</TableCell>\r\n\t\t\t\t\t\t\t<TableCell></TableCell>\r\n\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t{filteredRows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, idx) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<PatientDetailsRow key={`patient-details-${idx}`} {...row} />\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</TableBody>\r\n\t\t\t\t</Table>\r\n\t\t\t</TableContainer>\r\n\t\t\t<TablePagination\r\n\t\t\t\trowsPerPageOptions={[10, 25, 100]}\r\n\t\t\t\tcomponent=\"div\"\r\n\t\t\t\tcount={filteredRows.length}\r\n\t\t\t\trowsPerPage={rowsPerPage}\r\n\t\t\t\tpage={page}\r\n\t\t\t\tonChangePage={handleChangePage}\r\n\t\t\t\tonChangeRowsPerPage={handleChangeRowsPerPage}\r\n\t\t\t\tlabelRowsPerPage=\"Строк на странице:\"\r\n\t\t\t/>\r\n\t\t</Box>\r\n\t);\r\n};\r\n","C:\\dev\\medsurvey\\src\\features\\patientForm\\PatientForm.tsx",["126"],"import React, { useCallback, FunctionComponent } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\nimport { Box, Theme } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport Select from '@material-ui/core/Select';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\nimport { Routes } from '../../Routes';\r\nimport { calculateBMI } from '../../app/utils';\r\n\r\nimport {\r\n    patientFormSlice\r\n} from './patientFormSlice';\r\nimport {\r\n    patientFormViewSlice\r\n} from './patientFormViewSlice';\r\nimport {\r\n    selectPatientData,\r\n    selectIsSavedSuccess,\r\n    selectIsSavedFailure\r\n} from './selectors';\r\nimport {\r\n    ImmunotherapyMethods,\r\n    Pharmacotherapy,\r\n    EffectOfTreatmentWithAllergensOptions,\r\n    ImpactOnWorkFunctionsOptions,\r\n    DifficultyBreathingOptions,\r\n    DiagnosisForms,\r\n    DiagnosisCourses,\r\n    DiagnosisDegreesOfControl,\r\n    DiagnosisRespiratoryFailures,\r\n    WakeUpFrequencyOptions,\r\n    InhalerUseFrequencyOptions,\r\n    DegreeOfControlOptions\r\n} from '../../app/constants';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    navigationButton: {\r\n\t\tpadding: theme.spacing(1),\r\n\t\tmargin: theme.spacing(2)\r\n\t},\r\n\r\n\twrapper: {\r\n\t\tpadding: theme.spacing(3)\r\n    },\r\n    questionBlock: {\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    },\r\n    questionText: {\r\n        padding: theme.spacing(2),\r\n        fontWeight: 'bold'\r\n    },\r\n    formInput: {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    spirogramInputWrapper: {\r\n        display: 'flex',\r\n        flexDirection: 'row'\r\n    },\r\n    spirogramInputLabel: {\r\n        alignSelf: 'center',\r\n        width: '8%'\r\n    },\r\n    actionButton: {\r\n        marginRight: theme.spacing(1),\r\n        padding: theme.spacing(2)\r\n    },\r\n\r\n    astResultFullControl: {\r\n        color: '#62E980'\r\n    },\r\n    astResultPartialControl: {\r\n        color: '#FFC300'\r\n    },\r\n    astResultNoControl: {\r\n        color: '#FF3333'\r\n    }\r\n}));\r\n\r\ninterface PatientFormProps {\r\n}\r\n\r\nexport const PatientForm: FunctionComponent<PatientFormProps> = ({}: PatientFormProps) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const patientData = useSelector(selectPatientData);\r\n    const isSavedSuccess = useSelector(selectIsSavedSuccess);\r\n    const isSavedFailure = useSelector(selectIsSavedFailure);\r\n\r\n    const resetIsSaved = useCallback(() => {\r\n\t\tdispatch(patientFormViewSlice.actions.resetIsSaved);\r\n    }, [dispatch]);\r\n\r\n    const setName = useCallback(({ target: { value } }: React.ChangeEvent<{ value: string }>) => {\r\n\t\tdispatch(patientFormSlice.actions.setName(value));\r\n    }, [dispatch]);\r\n\r\n    const savePatientFormData = useCallback(() => {\r\n\t\tdispatch(patientFormViewSlice.actions.savePatientFormDataRequest());\r\n    }, [dispatch]);\r\n\r\n    const setSurname = useCallback(({ target: { value } }: React.ChangeEvent<{ value: string }>) => {\r\n\t\tdispatch(patientFormSlice.actions.setSurName(value));\r\n    }, [dispatch]);\r\n\r\n    const setPatronymic = useCallback(({ target: { value } }: React.ChangeEvent<{ value: string }>) => {\r\n\t\tdispatch(patientFormSlice.actions.setPatronymic(value));\r\n    }, [dispatch]);\r\n\r\n    const setDateOfBirth = useCallback(({ target: { value } }: React.ChangeEvent<{ value: string }>) => {\r\n\t\tdispatch(patientFormSlice.actions.setDateOfBirth(value));\r\n    }, [dispatch]);\r\n\r\n    const setDiagnosisCourse = useCallback((changeEvent: React.ChangeEvent<{ name?: string; value: unknown }>) => {\r\n        const { value } = changeEvent.target as { name?: string; value: number };\r\n\t\tdispatch(patientFormSlice.actions.setDiagnosisCourse(value));\r\n    }, [dispatch]);\r\n\r\n    const setDiagnosisForm = useCallback((changeEvent: React.ChangeEvent<{ name?: string; value: unknown }>) => {\r\n        const { value } = changeEvent.target as { name?: string; value: number };\r\n\t\tdispatch(patientFormSlice.actions.setDiagnosisForm(value));\r\n    }, [dispatch]);\r\n\r\n    const setDiagnosisRespiratoryFailure = useCallback((changeEvent: React.ChangeEvent<{ name?: string; value: unknown }>) => {\r\n        const { value } = changeEvent.target as { name?: string; value: number };\r\n\t\tdispatch(patientFormSlice.actions.setDiagnosisRespiratoryFailure(value));\r\n    }, [dispatch]);\r\n\r\n    const setDiagnosisDegreeOfControl = useCallback((changeEvent: React.ChangeEvent<{ name?: string; value: unknown }>) => {\r\n        const { value } = changeEvent.target as { name?: string; value: number };\r\n\t\tdispatch(patientFormSlice.actions.setDiagnosisDegreeOfControl(value));\r\n    }, [dispatch]);\r\n\r\n    const setLengthOfIllness = useCallback(({ target: { value } }: React.ChangeEvent<{ value: string }>) => {\r\n        dispatch(patientFormSlice.actions.setLengthOfIllness(Number(value)));\r\n    }, [dispatch]);\r\n\r\n    const getUpdateImmunotherapyMethods = useCallback((method: number) => {\r\n        return (event: React.ChangeEvent, checked: boolean) => checked\r\n            ? dispatch(patientFormSlice.actions.checkImmunotherapyMethod(method))\r\n            : dispatch(patientFormSlice.actions.uncheckImmunotherapyMethod(method));\r\n    }, [dispatch]);\r\n\r\n    const getUpdatePharmacotherapy = useCallback((method: number) => {\r\n        return (event: React.ChangeEvent, checked: boolean) => checked\r\n            ? dispatch(patientFormSlice.actions.checkPharmacotherapy(method))\r\n            : dispatch(patientFormSlice.actions.uncheckPharmacotherapy(method));\r\n    }, [dispatch]);\r\n\r\n    const setEffectOfTreatmentWithAllergens = useCallback((changeEvent: React.ChangeEvent<{ name?: string; value: unknown }>) => {\r\n        const { value } = changeEvent.target as { name?: string; value: number };\r\n\t\tdispatch(patientFormSlice.actions.setEffectOfTreatmentWithAllergens(value));\r\n    }, [dispatch]);\r\n\r\n    const setImpactOnWorkFunctions = useCallback((changeEvent: React.ChangeEvent<{ name?: string; value: unknown }>) => {\r\n        const { value } = changeEvent.target as { name?: string; value: number };\r\n\t\tdispatch(patientFormSlice.actions.setImpactOnWorkFunctions(value));\r\n    }, [dispatch]);\r\n\r\n    const setDifficultyBreathing = useCallback((changeEvent: React.ChangeEvent<{ name?: string; value: unknown }>) => {\r\n        const { value } = changeEvent.target as { name?: string; value: number };\r\n\t\tdispatch(patientFormSlice.actions.setDifficultyBreathing(value));\r\n    }, [dispatch]);\r\n\r\n    const setWakeUpFrequency = useCallback((changeEvent: React.ChangeEvent<{ name?: string; value: unknown }>) => {\r\n        const { value } = changeEvent.target as { name?: string; value: number };\r\n\t\tdispatch(patientFormSlice.actions.setWakeUpFrequency(value));\r\n    }, [dispatch]);\r\n\r\n    const setInhalerUseFrequency = useCallback((changeEvent: React.ChangeEvent<{ name?: string; value: unknown }>) => {\r\n        const { value } = changeEvent.target as { name?: string; value: number };\r\n\t\tdispatch(patientFormSlice.actions.setInhalerUseFrequency(value));\r\n    }, [dispatch]);   \r\n    \r\n    const setDegreeOfControl = useCallback((changeEvent: React.ChangeEvent<{ name?: string; value: unknown }>) => {\r\n        const { value } = changeEvent.target as { name?: string; value: number };\r\n\t\tdispatch(patientFormSlice.actions.setDegreeOfControl(value));\r\n    }, [dispatch]);\r\n\r\n    const setAgeWhenWasDiagnosed = useCallback(({ target: { value } }: React.ChangeEvent<{ value: string }>) => {\r\n        dispatch(patientFormSlice.actions.setAgeWhenWasDiagnosed(Number(value)));\r\n    }, [dispatch]);\r\n\r\n    const setIsFixedRespiratoryTractObstruction = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value === 'true';\r\n        dispatch(patientFormSlice.actions.setIsFixedRespiratoryTractObstruction(value));\r\n    }, [dispatch]);\r\n\r\n    const setIsLateStart = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value === 'true';\r\n        dispatch(patientFormSlice.actions.setIsLateStart(value));\r\n    }, [dispatch]);\r\n\r\n    const setIsHardCourse = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value === 'true';\r\n        dispatch(patientFormSlice.actions.setIsHardCourse(value));\r\n    }, [dispatch]);\r\n\r\n    const setIsThereContactWithAllergens = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value === 'true';\r\n        dispatch(patientFormSlice.actions.setIsThereContactWithAllergens(value));\r\n    }, [dispatch]);\r\n\r\n    const setIsPolysensitizationToAllergens = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value === 'true';\r\n        dispatch(patientFormSlice.actions.setIsPolysensitizationToAllergens(value));\r\n    }, [dispatch]);\r\n\r\n    const setIsAllergicPathology = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value === 'true';\r\n        dispatch(patientFormSlice.actions.setIsAllergicPathology(value));\r\n    }, [dispatch]);\r\n\r\n    const setIsCorrectInhalationTechnique = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value === 'true';\r\n        dispatch(patientFormSlice.actions.setIsCorrectInhalationTechnique(value));\r\n    }, [dispatch]);\r\n\r\n    const setIsChronicObstructivePulmonaryDisease = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value === 'true';\r\n        dispatch(patientFormSlice.actions.setIsChronicObstructivePulmonaryDisease(value));\r\n    }, [dispatch]);\r\n\r\n    const setIsFollowRecommendedMode = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value === 'true';\r\n        dispatch(patientFormSlice.actions.setIsFollowRecommendedMode(value));\r\n    }, [dispatch]);\r\n\r\n    const setIsSmoker = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value === 'true';\r\n        dispatch(patientFormSlice.actions.setIsSmoker(value));\r\n    }, [dispatch]);\r\n\r\n    const setIsContinueContactWithAllergens = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value === 'true';\r\n        dispatch(patientFormSlice.actions.setIsContinueContactWithAllergens(value));\r\n    }, [dispatch]);\r\n\r\n    const setWeight = useCallback(({ target: { value } }: React.ChangeEvent<{ value: string }>) => {\r\n        dispatch(patientFormSlice.actions.setWeight(Number(value)));\r\n    }, [dispatch]);\r\n    \r\n    const setHeight = useCallback(({ target: { value } }: React.ChangeEvent<{ value: string }>) => {\r\n        dispatch(patientFormSlice.actions.setHeight(Number(value)));\r\n    }, [dispatch]);\r\n\r\n    const setIsAllergenTreatmentBefore = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value === 'true';\r\n        dispatch(patientFormSlice.actions.setIsAllergenTreatmentBefore(value));\r\n    }, [dispatch]);\r\n\r\n    const setIsLateStartTreatmentWithAllergens = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value === 'true';\r\n        dispatch(patientFormSlice.actions.setIsLateStartTreatmentWithAllergens(value));\r\n    }, [dispatch]);\r\n\r\n    const setIsAutoserotherapyPerformedBefore = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value === 'true';\r\n        dispatch(patientFormSlice.actions.setIsAutoserotherapyPerformedBefore(value));\r\n    }, [dispatch]);\r\n\r\n    const setIsVariationInPeakExpiratoryFlowGreater20 = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value === 'true';\r\n        dispatch(patientFormSlice.actions.setIsVariationInPeakExpiratoryFlowGreater20(value));\r\n    }, [dispatch]);\r\n\r\n    const setIsIntercurrentUpperRespiratoryTractInfections = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value === 'true';\r\n        dispatch(patientFormSlice.actions.setIsIntercurrentUpperRespiratoryTractInfections(value));\r\n    }, [dispatch]);\r\n\r\n    const setIsUndesirableSideEffectsOfDrugs = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value === 'true';\r\n        dispatch(patientFormSlice.actions.setIsUndesirableSideEffectsOfDrugs(value));\r\n    }, [dispatch]);\r\n\r\n    const setIsNotPrescribedInhaledGlucocorticosteroids = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value === 'true';\r\n        dispatch(patientFormSlice.actions.setIsNotPrescribedInhaledGlucocorticosteroids(value));\r\n    }, [dispatch]);\r\n\r\n    const setIsUsedIneffectiveDosesOfInhaledGlucocorticosteroids = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value === 'true';\r\n        dispatch(patientFormSlice.actions.setIsUsedIneffectiveDosesOfInhaledGlucocorticosteroids(value));\r\n    }, [dispatch]);\r\n\r\n    const setIsForgotToTakeMedicationsForTreatment = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value === 'true';\r\n        dispatch(patientFormSlice.actions.setIsForgotToTakeMedicationsForTreatment(value));\r\n    }, [dispatch]);\r\n\r\n    const setIsSometimesInattentiveToTheHoursOfMedications = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value === 'true';\r\n        dispatch(patientFormSlice.actions.setIsSometimesInattentiveToTheHoursOfMedications(value));\r\n    }, [dispatch]);\r\n\r\n    const setIsSkipMedicationsIfFeelWell = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value === 'true';\r\n        dispatch(patientFormSlice.actions.setIsSkipMedicationsIfFeelWell(value));\r\n    }, [dispatch]);\r\n\r\n    const setIsMissNextMedicationsIfFeelBad = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value === 'true';\r\n        dispatch(patientFormSlice.actions.setIsMissNextMedicationsIfFeelBad(value));\r\n    }, [dispatch]);\r\n\r\n    const setSpirogramZhel = useCallback(({ target: { value } }: React.ChangeEvent<{ value: string }>) => {\r\n        dispatch(patientFormSlice.actions.setSpirogramZhel(Number(value)));\r\n    }, [dispatch]);\r\n    const setSpirogramDo = useCallback(({ target: { value } }: React.ChangeEvent<{ value: string }>) => {\r\n        dispatch(patientFormSlice.actions.setSpirogramDo(Number(value)));\r\n    }, [dispatch]);\r\n    const setSpirogramMod = useCallback(({ target: { value } }: React.ChangeEvent<{ value: string }>) => {\r\n        dispatch(patientFormSlice.actions.setSpirogramMod(Number(value)));\r\n    }, [dispatch]);\r\n    const setSpirogramFzhel = useCallback(({ target: { value } }: React.ChangeEvent<{ value: string }>) => {\r\n        dispatch(patientFormSlice.actions.setSpirogramFzhel(Number(value)));\r\n    }, [dispatch]);\r\n    const setSpirogramOfv1 = useCallback(({ target: { value } }: React.ChangeEvent<{ value: string }>) => {\r\n        dispatch(patientFormSlice.actions.setSpirogramOfv1(Number(value)));\r\n    }, [dispatch]);\r\n    const setSpirogramIt = useCallback(({ target: { value } }: React.ChangeEvent<{ value: string }>) => {\r\n        dispatch(patientFormSlice.actions.setSpirogramIt(Number(value)));\r\n    }, [dispatch]);\r\n    const setSpirogramPos = useCallback(({ target: { value } }: React.ChangeEvent<{ value: string }>) => {\r\n        dispatch(patientFormSlice.actions.setSpirogramPos(Number(value)));\r\n    }, [dispatch]);\r\n    const setSpirogramMos25 = useCallback(({ target: { value } }: React.ChangeEvent<{ value: string }>) => {\r\n        dispatch(patientFormSlice.actions.setSpirogramMos25(Number(value)));\r\n    }, [dispatch]);\r\n    const setSpirogramMos50 = useCallback(({ target: { value } }: React.ChangeEvent<{ value: string }>) => {\r\n        dispatch(patientFormSlice.actions.setSpirogramMos50(Number(value)));\r\n    }, [dispatch]);\r\n    const setSpirogramMos75 = useCallback(({ target: { value } }: React.ChangeEvent<{ value: string }>) => {\r\n        dispatch(patientFormSlice.actions.setSpirogramMos75(Number(value)));\r\n    }, [dispatch]);\r\n    const setSpirogramSos2575 = useCallback(({ target: { value } }: React.ChangeEvent<{ value: string }>) => {\r\n        dispatch(patientFormSlice.actions.setSpirogramSos2575(Number(value)));\r\n    }, [dispatch]);\r\n\r\n    const setReport = useCallback(({ target: { value } }: React.ChangeEvent<{ value: string }>) => {\r\n\t\tdispatch(patientFormSlice.actions.setReport(value));\r\n    }, [dispatch]);\r\n    \r\n    const astTestResult = patientData.survey.impactOnWorkFunctions +\r\n    patientData.survey.difficultyBreathing +\r\n    patientData.survey.wakeUpFrequency +\r\n    patientData.survey.inhalerUseFrequency +\r\n    patientData.survey.degreeOfControl;\r\n\r\n    let astTestResultConclusion = 'Отсутствие контроля';\r\n    let astTestResultClass = classes.astResultNoControl;\r\n    \r\n    if (astTestResult > 24) {\r\n        astTestResultConclusion = 'Полный котроль';\r\n        astTestResultClass = classes.astResultFullControl;\r\n    }\r\n    \r\n    if (astTestResult <= 24 && astTestResult >= 20) {\r\n        astTestResultConclusion = 'Частичный котроль';\r\n        astTestResultClass = classes.astResultPartialControl;\r\n    }\r\n\r\n    const commitmentAssessmentResult = \r\n    Number(patientData.survey.isForgotToTakeMedicationsForTreatment !== undefined && patientData.survey.isForgotToTakeMedicationsForTreatment === false) +\r\n    Number(patientData.survey.isSometimesInattentiveToTheHoursOfMedications !== undefined && patientData.survey.isSometimesInattentiveToTheHoursOfMedications === false) +\r\n    Number(patientData.survey.isSkipMedicationsIfFeelWell !== undefined && patientData.survey.isSkipMedicationsIfFeelWell === false) +\r\n    Number(patientData.survey.isMissNextMedicationsIfFeelBad !== undefined && patientData.survey.isMissNextMedicationsIfFeelBad === false);\r\n\r\n    let commitmentAssessmentResultConclusion = 'не привержен к лечению';\r\n    let commitmentAssessmentResultClass = classes.astResultNoControl;\r\n\r\n    if (commitmentAssessmentResult === 4) {\r\n        commitmentAssessmentResultConclusion = 'привержен к лечению';\r\n        commitmentAssessmentResultClass = classes.astResultFullControl;\r\n    }\r\n\r\n    if (commitmentAssessmentResult === 3) {\r\n        commitmentAssessmentResultConclusion = 'недостаточно привержен к лечению';\r\n        commitmentAssessmentResultClass = classes.astResultPartialControl;\r\n    }\r\n\r\n    const bmi = calculateBMI(patientData.survey.weight, patientData.survey.height);\r\n\r\n\treturn (\r\n    \t<Box className={classes.wrapper}>\r\n            <Snackbar open={isSavedSuccess} autoHideDuration={6000} onClose={resetIsSaved}>\r\n                <MuiAlert onClose={resetIsSaved} severity='success'>\r\n                    {'Данные пациента успешно сохранены'}\r\n                </MuiAlert>\r\n            </Snackbar>\r\n            <Snackbar open={isSavedFailure} autoHideDuration={6000} onClose={resetIsSaved}>\r\n                <MuiAlert onClose={resetIsSaved} severity='error'>\r\n                    {'Ошибка: не удалось сохранить данные пациента'}\r\n                </MuiAlert>\r\n            </Snackbar>\r\n\r\n            <Button\r\n                className={classes.navigationButton}\r\n                variant='outlined'\r\n                color='primary'\r\n                component={RouterLink}\r\n                to={Routes.Home}>\r\n                { 'Назад' }\r\n            </Button>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'1. Ваши фамилия, имя, отчество'}\r\n                </Box>\r\n                <TextField\r\n                    required\r\n                    id='surname'\r\n                    label='Фамилия'\r\n                    variant='outlined'\r\n                    value={ patientData.surname }\r\n                    onChange={ setSurname }\r\n                    className={classes.formInput}\r\n                />\r\n                <TextField\r\n                    required\r\n                    id='name'\r\n                    label='Имя'\r\n                    variant='outlined'\r\n                    value={ patientData.name }\r\n                    onChange={ setName }\r\n                    className={classes.formInput}\r\n                />\r\n                <TextField\r\n                    required\r\n                    id='patronymic'\r\n                    label='Отчество'\r\n                    variant='outlined'\r\n                    value={ patientData.patronymic }\r\n                    onChange={ setPatronymic }\r\n                    className={classes.formInput}\r\n                />\r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'2. Укажите Ваш возраст'}\r\n                </Box>\r\n                <TextField\r\n                    id='birthday'\r\n                    label='Дата рождения'\r\n                    type='date'\r\n                    variant='outlined'\r\n                    value={ patientData.dateOfBirth }\r\n                    onChange={ setDateOfBirth }\r\n                    required           \r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                />\r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'3. Укажите Ваш диагноз: Бронхиальная астма (J 45)'}\r\n                </Box>\r\n                <FormControl variant='outlined' className={classes.formInput}>\r\n                    <InputLabel htmlFor='bronchial-asthma-form'>форма</InputLabel>\r\n                    <Select\r\n                        label='форма'\r\n                        inputProps={{\r\n                            name: 'form',\r\n                            id: 'bronchial-asthma-form',\r\n                        }}\r\n                        value={  patientData.survey.diagnosisForm }\r\n                        onChange={setDiagnosisForm}\r\n                    >\r\n                        { DiagnosisForms.map(diagnosisForm => (\r\n                           <option value={diagnosisForm.value}>{diagnosisForm.text}</option>\r\n                        )) }\r\n                    </Select>\r\n                </FormControl>\r\n                <FormControl variant='outlined' className={classes.formInput}>\r\n                    <InputLabel htmlFor='bronchial-asthma-course'>течение</InputLabel>\r\n                    <Select\r\n                        label='течение'\r\n                        inputProps={{\r\n                            name: 'course',\r\n                            id: 'bronchial-asthma-course',\r\n                        }}\r\n                        value={ patientData.survey.diagnosisCourse }\r\n                        onChange={setDiagnosisCourse}\r\n                    >\r\n                        { DiagnosisCourses.map(diagnosisCourse => (\r\n                           <option value={diagnosisCourse.value}>{diagnosisCourse.text}</option>\r\n                        )) }\r\n                    </Select>\r\n                </FormControl>\r\n                <FormControl variant='outlined' className={classes.formInput}>\r\n                    <InputLabel htmlFor='bronchial-asthma-degree-of-control'>степень контроля (если астма впервые выявленная, то не указывается)</InputLabel>\r\n                    <Select\r\n                        label='степень контроля (если астма впервые выявленная, то не указывается)'\r\n                        inputProps={{\r\n                            name: 'course',\r\n                            id: 'bronchial-asthma-degree-of-control',\r\n                        }}\r\n                        value={ patientData.survey.diagnosisDegreeOfControl }\r\n                        onChange={setDiagnosisDegreeOfControl}\r\n                    >\r\n                        { DiagnosisDegreesOfControl.map(degreeOfControl => (\r\n                           <option value={degreeOfControl.value}>{degreeOfControl.text}</option>\r\n                        )) }\r\n                    </Select>\r\n                </FormControl>\r\n                <FormControl variant='outlined' className={classes.formInput}>\r\n                    <InputLabel htmlFor='bronchial-asthma-respiratory-failure'>{'ДН (дыхательная недостаточность)'}</InputLabel>\r\n                    <Select\r\n                        label='ДН (дыхательная недостаточность)'\r\n                        inputProps={{\r\n                            name: 'course',\r\n                            id: 'bronchial-asthma-respiratory-failure',\r\n                        }}\r\n                        value={ patientData.survey.diagnosisRespiratoryFailure }\r\n                        onChange={setDiagnosisRespiratoryFailure}\r\n                    >\r\n                         { DiagnosisRespiratoryFailures.map(respiratoryFailure => (\r\n                           <option value={respiratoryFailure.value}>{respiratoryFailure.text}</option>\r\n                        )) }\r\n                    </Select>\r\n                </FormControl>\r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'4. Укажите стаж заболевания бронхиальной астмой'}\r\n                </Box>\r\n                <TextField\r\n                    id='lengthOfIllness'\r\n                    label='Стаж заболевания'\r\n                    type='number'\r\n                    variant='outlined'\r\n                    value={ patientData.survey.lengthOfIllness || '' }\r\n                    onChange={ setLengthOfIllness }\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                />\r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'5. Какой метод иммунотерапии использовался при лечении?'}\r\n                </Box>\r\n                <FormControl component='fieldset'>\r\n                    <FormGroup>\r\n                        { ImmunotherapyMethods.map(method => (\r\n                           <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                        onChange={getUpdateImmunotherapyMethods(method.value)}\r\n                                        checked={patientData.survey.immunotherapyMethods.some(m => m === method.value)}\r\n                                    />\r\n                                }\r\n                                label={ method.text }\r\n                            /> \r\n                        )) }\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'6. Какую фармакотерапию Вы получаете?'}\r\n                </Box>\r\n                <FormControl component='fieldset'>\r\n                    <FormGroup>\r\n                        { Pharmacotherapy.map(pharmacotherapy => (\r\n                           <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                        onChange={getUpdatePharmacotherapy(pharmacotherapy.value)}\r\n                                        checked={patientData.survey.pharmacotherapy.some(p => p === pharmacotherapy.value)}\r\n                                    />\r\n                                }\r\n                                label={ pharmacotherapy.text }\r\n                            /> \r\n                        )) }\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'7. Как Вы оцениваете эффект от лечения аллергенами (аутосывороткой)?'}\r\n                </Box>\r\n                <FormControl variant='outlined' className={classes.formInput}>\r\n                    <Select\r\n                        inputProps={{\r\n                            name: 'form',\r\n                            id: 'effect-of-treatment-with-allergens',\r\n                        }}\r\n                        value={  patientData.survey.effectOfTreatmentWithAllergens }\r\n                        onChange={ setEffectOfTreatmentWithAllergens }\r\n                        \r\n                    > \r\n                    {\r\n                        EffectOfTreatmentWithAllergensOptions.map(optionItem => (\r\n                            <option value={optionItem.value}>{optionItem.text}</option>\r\n                        ))\r\n                    }\r\n                    </Select>\r\n                </FormControl>\r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'8. Как часто за последние 4 недели астма мешала Вам выполнять обычный объём работы в учебном заведении, на работе или дома?'}\r\n                </Box>\r\n                <FormControl variant='outlined' className={classes.formInput}>\r\n                    <Select\r\n                        inputProps={{\r\n                            name: 'form',\r\n                            id: 'impact-on-work-functions',\r\n                        }}\r\n                        value={  patientData.survey.impactOnWorkFunctions }\r\n                        onChange={ setImpactOnWorkFunctions }\r\n                    >\r\n                    {\r\n                        ImpactOnWorkFunctionsOptions.map(optionItem => (\r\n                            <option value={optionItem.value}>{optionItem.text}</option>\r\n                        ))\r\n                    }\r\n                    </Select>\r\n                </FormControl>\r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'9. Как часто за последние 4 недели Вы отмечали у себя затруднённое дыхание?'}\r\n                </Box>\r\n                <FormControl variant='outlined' className={classes.formInput}>\r\n                    <Select\r\n                        inputProps={{\r\n                            name: 'form',\r\n                            id: 'difficulty-breathing',\r\n                        }}\r\n                        value={  patientData.survey.difficultyBreathing }\r\n                        onChange={ setDifficultyBreathing }\r\n                    >\r\n                        {\r\n                            DifficultyBreathingOptions.map(optionItem => (\r\n                                <option value={optionItem.value}>{optionItem.text}</option>\r\n                            ))\r\n                        }\r\n                    </Select>\r\n                </FormControl>\r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'10. Как часто за последние 4 недели Вы просыпались ночью или раньше, чем обычно, из-за симптомов астмы (свистящего дыхания, кашля, затруднённого дыхания, чувства стеснения в груди или боли в груди)?'}\r\n                </Box>\r\n                <FormControl variant='outlined' className={classes.formInput}>\r\n                    <Select\r\n                        inputProps={{\r\n                            name: 'form',\r\n                            id: 'wake-up-frequency',\r\n                        }}\r\n                        value={  patientData.survey.wakeUpFrequency }\r\n                        onChange={ setWakeUpFrequency }\r\n                    >\r\n                        {\r\n                            WakeUpFrequencyOptions.map(optionItem => (\r\n                                <option value={optionItem.value}>{optionItem.text}</option>\r\n                            ))\r\n                        }\r\n                    </Select>\r\n                </FormControl>\r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'11. Как часто за последние 4 недели Вы использовали быстродействующий ингалятор (например, Беротек, Сальбутамол)?'}\r\n                </Box>\r\n                <FormControl variant='outlined' className={classes.formInput}>\r\n                    <Select\r\n                        inputProps={{\r\n                            name: 'form',\r\n                            id: 'inhaler-use-frequency',\r\n                        }}\r\n                        value={  patientData.survey.inhalerUseFrequency }\r\n                        onChange={ setInhalerUseFrequency }\r\n                    >\r\n                        {\r\n                            InhalerUseFrequencyOptions.map(optionItem => (\r\n                                <option value={optionItem.value}>{optionItem.text}</option>\r\n                            ))\r\n                        }\r\n                    </Select>\r\n                </FormControl>\r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'12. Как бы Вы оценили, насколько Вам удавалось контролировать астму за последние 4 недели?'}\r\n                </Box>\r\n                <FormControl variant='outlined' className={classes.formInput}>\r\n                    <Select\r\n                        inputProps={{\r\n                            name: 'form',\r\n                            id: 'degree-of-control',\r\n                        }}\r\n                        value={  patientData.survey.degreeOfControl }\r\n                        onChange={ setDegreeOfControl }\r\n                    >\r\n                        {\r\n                            DegreeOfControlOptions.map(optionItem => (\r\n                                <option value={optionItem.value}>{optionItem.text}</option>\r\n                            ))\r\n                        }\r\n                    </Select>\r\n                </FormControl>            \r\n                <Box my={3} display={'flex'} flexDirection={'row'}>\r\n                    {`Результат АСТ-теста: ${astTestResult} баллов `}\r\n                    <Box pl={1} className={astTestResultClass}>{`(${astTestResultConclusion})`}</Box>\r\n                </Box>\r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'13. В каком возрасте у Вас была диагностирована бронхиальная астма?'}\r\n                </Box>\r\n                <TextField\r\n                    id='ageWhenWasDiagnosed'\r\n                    label='Возраст в  котором был поставлен диагноз'\r\n                    type='number'\r\n                    variant='outlined'\r\n                    onChange={ setAgeWhenWasDiagnosed }\r\n                    value={ patientData.survey.ageWhenWasDiagnosed || '' }\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                />\r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'14. У пациента бронхиальная астма с фиксированной обструкцией дыхательных путей?'}\r\n                </Box>\r\n                <FormControl component='fieldset'>\r\n                    <RadioGroup\r\n                        aria-label='is fixed respiratory tract obstruction'\r\n                        name='isFixedRespiratoryTractObstruction'\r\n                        value={ patientData.survey.isFixedRespiratoryTractObstruction }\r\n                        onChange={ setIsFixedRespiratoryTractObstruction }\r\n                    >\r\n                        <FormControlLabel value={'true'} control={<Radio />} label={'Да'} />\r\n                        <FormControlLabel value={'false'} control={<Radio />} label={'Нет'} />\r\n                    </RadioGroup>\r\n                </FormControl>            \r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'15. У пациента бронхиальная астма с поздним началом?'}\r\n                </Box>\r\n                <FormControl component='fieldset'>\r\n                    <RadioGroup\r\n                        aria-label='is late start'\r\n                        name='isLateStart'\r\n                        value={ patientData.survey.isLateStart }\r\n                        onChange={ setIsLateStart }\r\n                    >\r\n                        <FormControlLabel value={'true'} control={<Radio />} label={'Да'} />\r\n                        <FormControlLabel value={'false'} control={<Radio />} label={'Нет'} />\r\n                    </RadioGroup>\r\n                </FormControl>            \r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'16. У пациента тяжёлое течение бронхиальной астмы?'}\r\n                </Box>\r\n                <FormControl component='fieldset'>\r\n                    <RadioGroup\r\n                        aria-label='is hard course'\r\n                        name='isHardCourse'\r\n                        value={ patientData.survey.isHardCourse }\r\n                        onChange={ setIsHardCourse }\r\n                    >\r\n                        <FormControlLabel value={'true'} control={<Radio />} label={'Да'} />\r\n                        <FormControlLabel value={'false'} control={<Radio />} label={'Нет'} />\r\n                    </RadioGroup>\r\n                </FormControl>            \r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'17. Имеется ли у Вас контакт в быту и на производстве с аллергенами и триггерами?'}\r\n                </Box>\r\n                <FormControl component='fieldset'>\r\n                    <RadioGroup\r\n                        aria-label='is there contact with allergens'\r\n                        name='isThereContactWithAllergens'\r\n                        value={ patientData.survey.isThereContactWithAllergens }\r\n                        onChange={ setIsThereContactWithAllergens }\r\n                    >\r\n                        <FormControlLabel value={'true'} control={<Radio />} label={'Да'} />\r\n                        <FormControlLabel value={'false'} control={<Radio />} label={'Нет'} />\r\n                    </RadioGroup>\r\n                </FormControl>            \r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'18. Имеется ли у Вас полисенсибилизация к различным аллергенам?'}\r\n                </Box>\r\n                <FormControl component='fieldset'>\r\n                    <RadioGroup\r\n                        aria-label='polysensitization to allergens'\r\n                        name='isPolysensitizationToAllergens'\r\n                        value={ patientData.survey.isPolysensitizationToAllergens }\r\n                        onChange={ setIsPolysensitizationToAllergens }\r\n                    >\r\n                        <FormControlLabel value={'true'} control={<Radio />} label={'Да'} />\r\n                        <FormControlLabel value={'false'} control={<Radio />} label={'Нет'} />\r\n                    </RadioGroup>\r\n                </FormControl>            \r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'19. Имеется ли у Вас сопутствующая аллергопатология (аллергический ринит, конъюнктивит, пищевая аллергия)?'}\r\n                </Box>\r\n                <FormControl component='fieldset'>\r\n                    <RadioGroup\r\n                        aria-label='allergic pathology'\r\n                        name='isAllergicPathology'\r\n                        value={ patientData.survey.isAllergicPathology }\r\n                        onChange={ setIsAllergicPathology }\r\n                    >\r\n                        <FormControlLabel value={'true'} control={<Radio />} label={'Да'} />\r\n                        <FormControlLabel value={'false'} control={<Radio />} label={'Нет'} />\r\n                    </RadioGroup>\r\n                </FormControl>            \r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'20. Техника ингаляции правильная?'}\r\n                </Box>\r\n                <FormControl component='fieldset'>\r\n                    <RadioGroup\r\n                        aria-label='is correct inhalation technique'\r\n                        name='isCorrectInhalationTechnique'\r\n                        value={ patientData.survey.isCorrectInhalationTechnique }\r\n                        onChange={ setIsCorrectInhalationTechnique }\r\n                    >\r\n                        <FormControlLabel value={'true'} control={<Radio />} label={'Да'} />\r\n                        <FormControlLabel value={'false'} control={<Radio />} label={'Нет'} />\r\n                    </RadioGroup>\r\n                </FormControl>            \r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'21. Имеется ли у Вас сопутствующая хроническая обструктивная болезнь лёгких?'}\r\n                </Box>\r\n                <FormControl component='fieldset'>\r\n                    <RadioGroup\r\n                        aria-label='is chronic obstructive pulmonary disease'\r\n                        name='isChronicObstructivePulmonaryDisease'\r\n                        value={ patientData.survey.isChronicObstructivePulmonaryDisease }\r\n                        onChange={ setIsChronicObstructivePulmonaryDisease }\r\n                    >\r\n                        <FormControlLabel value={'true'} control={<Radio />} label={'Да'} />\r\n                        <FormControlLabel value={'false'} control={<Radio />} label={'Нет'} />\r\n                    </RadioGroup>\r\n                </FormControl>            \r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'22. Соблюдаете ли Вы рекомендованные режим и образ жизни?'}\r\n                </Box>\r\n                <FormControl component='fieldset'>\r\n                    <RadioGroup\r\n                        aria-label='is follow recommended mode'\r\n                        name='isFollowRecommendedMode'\r\n                        value={ patientData.survey.isFollowRecommendedMode }\r\n                        onChange={ setIsFollowRecommendedMode }\r\n                    >\r\n                        <FormControlLabel value={'true'} control={<Radio />} label={'Да'} />\r\n                        <FormControlLabel value={'false'} control={<Radio />} label={'Нет'} />\r\n                    </RadioGroup>\r\n                </FormControl>            \r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'23. Курите ли Вы?'}\r\n                </Box>\r\n                <FormControl component='fieldset'>\r\n                    <RadioGroup\r\n                        aria-label='is smoker'\r\n                        name='isSmoker'\r\n                        value={ patientData.survey.isSmoker }\r\n                        onChange={ setIsSmoker }\r\n                    >\r\n                        <FormControlLabel value={'true'} control={<Radio />} label={'Да'} />\r\n                        <FormControlLabel value={'false'} control={<Radio />} label={'Нет'} />\r\n                    </RadioGroup>\r\n                </FormControl>            \r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'24. Продолжается ли контакт с аллергенами и триггерами?'}\r\n                </Box>\r\n                <FormControl component='fieldset'>\r\n                    <RadioGroup\r\n                        aria-label='is continue contact with allergens'\r\n                        name='isContinueContactWithAllergens'\r\n                        value={ patientData.survey.isContinueContactWithAllergens }\r\n                        onChange={ setIsContinueContactWithAllergens }\r\n                    >\r\n                        <FormControlLabel value={'true'} control={<Radio />} label={'Да'} />\r\n                        <FormControlLabel value={'false'} control={<Radio />} label={'Нет'} />\r\n                    </RadioGroup>\r\n                </FormControl>            \r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'25. Укажите Ваш вес и рост'}\r\n                </Box>\r\n                <TextField\r\n                    id='weight'\r\n                    label='вес (кг)'\r\n                    type='number'\r\n                    variant='outlined'\r\n                    className={classes.formInput}\r\n                    onChange={ setWeight }\r\n                    value={ patientData.survey.weight || '' }\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                />\r\n                <TextField\r\n                    id='height'\r\n                    label='рост (см)'\r\n                    type='number'\r\n                    variant='outlined'\r\n                    className={classes.formInput}\r\n                    onChange={ setHeight }\r\n                    value={ patientData.survey.height || '' }\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                />\r\n                <Box>\r\n                    { bmi && `ИМТ: ${bmi.toFixed(2)}`}\r\n                </Box>    \r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'26. Проводилось ли раньше лечение аллергенами?'}\r\n                </Box>\r\n                <FormControl component='fieldset'>\r\n                    <RadioGroup\r\n                        aria-label='is allergen treatment before'\r\n                        name='isAllergenTreatmentBefore'\r\n                        value={ patientData.survey.isAllergenTreatmentBefore }\r\n                        onChange={ setIsAllergenTreatmentBefore }\r\n                    >\r\n                        <FormControlLabel value={'true'} control={<Radio />} label={'Да'} />\r\n                        <FormControlLabel value={'false'} control={<Radio />} label={'Нет'} />\r\n                    </RadioGroup>\r\n                </FormControl>            \r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'27. Поздно ли от момента установления диагноза было начато лечение аллергенами?'}\r\n                </Box>\r\n                <FormControl component='fieldset'>\r\n                    <RadioGroup\r\n                        aria-label='is late start treatment with allergens'\r\n                        name='isLateStartTreatmentWithAllergens'\r\n                        value={ patientData.survey.isLateStartTreatmentWithAllergens }\r\n                        onChange={ setIsLateStartTreatmentWithAllergens }\r\n                    >\r\n                        <FormControlLabel value={'true'} control={<Radio />} label={'Да'} />\r\n                        <FormControlLabel value={'false'} control={<Radio />} label={'Нет'} />\r\n                    </RadioGroup>\r\n                </FormControl>            \r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'28. Проводилось ли раньше аутосеротерапия?'}\r\n                </Box>\r\n                <FormControl component='fieldset'>\r\n                    <RadioGroup\r\n                        aria-label='is autoserotherapy performed before'\r\n                        name='isAutoserotherapyPerformedBefore'\r\n                        value={ patientData.survey.isAutoserotherapyPerformedBefore }\r\n                        onChange={ setIsAutoserotherapyPerformedBefore }\r\n                    >\r\n                        <FormControlLabel value={'true'} control={<Radio />} label={'Да'} />\r\n                        <FormControlLabel value={'false'} control={<Radio />} label={'Нет'} />\r\n                    </RadioGroup>\r\n                </FormControl>            \r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'29. Вариабельность пиковой скорости выдоха >20%?'}\r\n                </Box>\r\n                <FormControl component='fieldset'>\r\n                    <RadioGroup\r\n                        aria-label='is variation in peak expiratory flow greater 20'\r\n                        name='isVariationInPeakExpiratoryFlowGreater20'\r\n                        value={ patientData.survey.isVariationInPeakExpiratoryFlowGreater20 }\r\n                        onChange={ setIsVariationInPeakExpiratoryFlowGreater20 }\r\n                    >\r\n                        <FormControlLabel value={'true'} control={<Radio />} label={'Да'} />\r\n                        <FormControlLabel value={'false'} control={<Radio />} label={'Нет'} />\r\n                    </RadioGroup>\r\n                </FormControl>            \r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'30. Наличие у пациента интеркуррентных инфекций верхних дыхательных путей?'}\r\n                </Box>\r\n                <FormControl component='fieldset'>\r\n                    <RadioGroup\r\n                        aria-label='is intercurrent upper respiratory tract infections'\r\n                        name='isIntercurrentUpperRespiratoryTractInfections'\r\n                        value={ patientData.survey.isIntercurrentUpperRespiratoryTractInfections }\r\n                        onChange={ setIsIntercurrentUpperRespiratoryTractInfections }\r\n                    >\r\n                        <FormControlLabel value={'true'} control={<Radio />} label={'Да'} />\r\n                        <FormControlLabel value={'false'} control={<Radio />} label={'Нет'} />\r\n                    </RadioGroup>\r\n                </FormControl>            \r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'31. Наличие у пациента нежелательных побочных эффектов лекарственных средств?'}\r\n                </Box>\r\n                <FormControl component='fieldset'>\r\n                    <RadioGroup\r\n                        aria-label='is undesirable side effects of drugs'\r\n                        name='isUndesirableSideEffectsOfDrugs'\r\n                        value={ patientData.survey.isUndesirableSideEffectsOfDrugs }\r\n                        onChange={ setIsUndesirableSideEffectsOfDrugs }\r\n                    >\r\n                        <FormControlLabel value={'true'} control={<Radio />} label={'Да'} />\r\n                        <FormControlLabel value={'false'} control={<Radio />} label={'Нет'} />\r\n                    </RadioGroup>\r\n                </FormControl>            \r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'32. Не назначались ингаляционные глюкокортикостероиды?'}\r\n                </Box>\r\n                <FormControl component='fieldset'>\r\n                    <RadioGroup\r\n                        aria-label='is not prescribed inhaled glucocorticosteroids'\r\n                        name='isNotPrescribedInhaledGlucocorticosteroids'\r\n                        value={ patientData.survey.isNotPrescribedInhaledGlucocorticosteroids }\r\n                        onChange={ setIsNotPrescribedInhaledGlucocorticosteroids }\r\n                    >\r\n                        <FormControlLabel value={'true'} control={<Radio />} label={'Да'} />\r\n                        <FormControlLabel value={'false'} control={<Radio />} label={'Нет'} />\r\n                    </RadioGroup>\r\n                </FormControl>            \r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'33. Использовались неэффективные дозы ингаляционных глюкокортикостероидов?'}\r\n                </Box>\r\n                <FormControl component='fieldset'>\r\n                    <RadioGroup\r\n                        aria-label='is used ineffective doses of inhaled glucocorticosteroids'\r\n                        name='isUsedIneffectiveDosesOfInhaledGlucocorticosteroids'\r\n                        value={ patientData.survey.isUsedIneffectiveDosesOfInhaledGlucocorticosteroids }\r\n                        onChange={ setIsUsedIneffectiveDosesOfInhaledGlucocorticosteroids }\r\n                    >\r\n                        <FormControlLabel value={'true'} control={<Radio />} label={'Да'} />\r\n                        <FormControlLabel value={'false'} control={<Radio />} label={'Нет'} />\r\n                    </RadioGroup>\r\n                </FormControl>            \r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'34. Вы когда-нибудь забывали принять препараты для лечения?'}\r\n                </Box>\r\n                <FormControl component='fieldset'>\r\n                    <RadioGroup\r\n                        aria-label='is forgot to take medications for treatment'\r\n                        name='isForgotToTakeMedicationsForTreatment'\r\n                        value={ patientData.survey.isForgotToTakeMedicationsForTreatment }\r\n                        onChange={ setIsForgotToTakeMedicationsForTreatment }\r\n                    >\r\n                        <FormControlLabel value={'true'} control={<Radio />} label={'Да'} />\r\n                        <FormControlLabel value={'false'} control={<Radio />} label={'Нет'} />\r\n                    </RadioGroup>\r\n                </FormControl>            \r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'35. Относитесь ли Вы иногда невнимательно к часам приёма?'}\r\n                </Box>\r\n                <FormControl component='fieldset'>\r\n                    <RadioGroup\r\n                        aria-label='is sometimes inattentive to the hours of medications'\r\n                        name='isSometimesInattentiveToTheHoursOfMedications'\r\n                        value={ patientData.survey.isSometimesInattentiveToTheHoursOfMedications }\r\n                        onChange={ setIsSometimesInattentiveToTheHoursOfMedications }\r\n                    >\r\n                        <FormControlLabel value={'true'} control={<Radio />} label={'Да'} />\r\n                        <FormControlLabel value={'false'} control={<Radio />} label={'Нет'} />\r\n                    </RadioGroup>\r\n                </FormControl>            \r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'36. Пропускаете ли Вы приём препаратов, если чувствуете себя хорошо?'}\r\n                </Box>\r\n                <FormControl component='fieldset'>\r\n                    <RadioGroup\r\n                        aria-label='is skip medications if feel well'\r\n                        name='isSkipMedicationsIfFeelWell'\r\n                        value={ patientData.survey.isSkipMedicationsIfFeelWell }\r\n                        onChange={ setIsSkipMedicationsIfFeelWell }\r\n                    >\r\n                        <FormControlLabel value={'true'} control={<Radio />} label={'Да'} />\r\n                        <FormControlLabel value={'false'} control={<Radio />} label={'Нет'} />\r\n                    </RadioGroup>\r\n                </FormControl>            \r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'37. Если Вы чувствуете себя плохо после приёма лекарственного средства, пропускаете ли Вы следующий приём?'}\r\n                </Box>\r\n                <FormControl component='fieldset'>\r\n                    <RadioGroup\r\n                        aria-label='is miss next medications if feel bad'\r\n                        name='isMissNextMedicationsIfFeelBad'\r\n                        value={ patientData.survey.isMissNextMedicationsIfFeelBad }\r\n                        onChange={ setIsMissNextMedicationsIfFeelBad }\r\n                    >\r\n                        <FormControlLabel value={'true'} control={<Radio />} label={'Да'} />\r\n                        <FormControlLabel value={'false'} control={<Radio />} label={'Нет'} />\r\n                    </RadioGroup>\r\n                </FormControl>\r\n                <Box my={3} display={'flex'} flexDirection={'row'}>\r\n                    {`Результат теста приверженности: ${commitmentAssessmentResult || 0}`}\r\n                    <Box pl={1} className={commitmentAssessmentResultClass}>{`(${commitmentAssessmentResultConclusion})`}</Box>\r\n                </Box>\r\n            </Box>\r\n            <Box className={classes.questionBlock}>\r\n                <Box className={classes.questionText}>\r\n                    {'38. Спирограмма:'}\r\n                </Box>\r\n                <Box className={classes.spirogramInputWrapper}>\r\n                    <Box className={classes.spirogramInputLabel}>{'ЖЕЛ'}</Box>\r\n                    <TextField\r\n                        id='zhel'\r\n                        type='number'\r\n                        variant='outlined'\r\n                        className={classes.formInput}\r\n                        value={ patientData.survey.spirogram.zhel || '' }\r\n                        onChange={ setSpirogramZhel }\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                    />    \r\n                </Box>\r\n                <Box className={classes.spirogramInputWrapper}>\r\n                    <Box className={classes.spirogramInputLabel}>{'ДО'}</Box>\r\n                    <TextField\r\n                        id='do'\r\n                        type='number'\r\n                        variant='outlined'\r\n                        className={classes.formInput}\r\n                        value={ patientData.survey.spirogram.do || '' }\r\n                        onChange={ setSpirogramDo }\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                    />    \r\n                </Box>\r\n                <Box className={classes.spirogramInputWrapper}>\r\n                    <Box className={classes.spirogramInputLabel}>{'МОД'}</Box>\r\n                    <TextField\r\n                        id='mod'\r\n                        type='number'\r\n                        variant='outlined'\r\n                        className={classes.formInput}\r\n                        value={ patientData.survey.spirogram.mod || '' }\r\n                        onChange={ setSpirogramMod }\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                    />    \r\n                </Box>\r\n                <Box className={classes.spirogramInputWrapper}>\r\n                    <Box className={classes.spirogramInputLabel}>{'ФЖЕЛ'}</Box>\r\n                    <TextField\r\n                        id='fzhel'\r\n                        type='number'\r\n                        variant='outlined'\r\n                        className={classes.formInput}\r\n                        value={ patientData.survey.spirogram.fzhel || '' }\r\n                        onChange={ setSpirogramFzhel }\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                    />    \r\n                </Box>\r\n                <Box className={classes.spirogramInputWrapper}>\r\n                    <Box className={classes.spirogramInputLabel}>{'ОФВ1'}</Box>\r\n                    <TextField\r\n                        id='ofv1'\r\n                        type='number'\r\n                        variant='outlined'\r\n                        className={classes.formInput}\r\n                        value={ patientData.survey.spirogram.ofv1 || '' }\r\n                        onChange={ setSpirogramOfv1 }\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                    />    \r\n                </Box>\r\n                <Box className={classes.spirogramInputWrapper}>\r\n                    <Box className={classes.spirogramInputLabel}>{'ИТ'}</Box>\r\n                    <TextField\r\n                        id='it'\r\n                        type='number'\r\n                        variant='outlined'\r\n                        className={classes.formInput}\r\n                        value={ patientData.survey.spirogram.it || '' }\r\n                        onChange={ setSpirogramIt }\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                    />    \r\n                </Box>\r\n                <Box className={classes.spirogramInputWrapper}>\r\n                    <Box className={classes.spirogramInputLabel}>{'ПОСвыд'}</Box>\r\n                    <TextField\r\n                        id='pos'\r\n                        type='number'\r\n                        variant='outlined'\r\n                        className={classes.formInput}\r\n                        value={ patientData.survey.spirogram.pos || '' }\r\n                        onChange={ setSpirogramPos }\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                    />    \r\n                </Box>\r\n                <Box className={classes.spirogramInputWrapper}>\r\n                    <Box className={classes.spirogramInputLabel}>{'МОС25'}</Box>\r\n                    <TextField\r\n                        id='mos25'\r\n                        type='number'\r\n                        variant='outlined'\r\n                        className={classes.formInput}\r\n                        value={ patientData.survey.spirogram.mos25 || '' }\r\n                        onChange={ setSpirogramMos25 }\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                    />    \r\n                </Box>\r\n                <Box className={classes.spirogramInputWrapper}>\r\n                    <Box className={classes.spirogramInputLabel}>{'МОС50'}</Box>\r\n                    <TextField\r\n                        id='mos50'\r\n                        type='number'\r\n                        variant='outlined'\r\n                        className={classes.formInput}\r\n                        value={ patientData.survey.spirogram.mos50 || '' }\r\n                        onChange={ setSpirogramMos50 }\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                    />    \r\n                </Box>\r\n                <Box className={classes.spirogramInputWrapper}>\r\n                    <Box className={classes.spirogramInputLabel}>{'МОС75'}</Box>\r\n                    <TextField\r\n                        id='mos75'\r\n                        type='number'\r\n                        variant='outlined'\r\n                        className={classes.formInput}\r\n                        value={ patientData.survey.spirogram.mos75 || '' }\r\n                        onChange={ setSpirogramMos75 }\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                    />    \r\n                </Box>\r\n                <Box className={classes.spirogramInputWrapper}>\r\n                    <Box className={classes.spirogramInputLabel}>{'СОС2575'}</Box>\r\n                    <TextField\r\n                        id='sos2575'\r\n                        type='number'\r\n                        variant='outlined'\r\n                        className={classes.formInput}\r\n                        value={ patientData.survey.spirogram.sos2575 || '' }\r\n                        onChange={ setSpirogramSos2575 }\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                    />    \r\n                </Box>\r\n            </Box>\r\n            <Box pt={5} pb={3} className={classes.questionBlock}>\r\n                <TextField\r\n                    id='report'\r\n                    label='заключение'\r\n                    variant='outlined'\r\n                    multiline\r\n                    rows={5}\r\n                    className={classes.formInput}\r\n                    onChange={ setReport }\r\n                    value={ patientData.survey.report }\r\n                />\r\n            </Box>\r\n            <Box>\r\n                <Button\r\n                    className={classes.actionButton}\r\n                    variant='contained'\r\n                    color='primary'\r\n                    onClick={savePatientFormData}>\r\n                        {'Сохранить'}\r\n                </Button>\r\n                <Button\r\n                    className={classes.actionButton}\r\n                    variant='outlined'\r\n                    color='primary'\r\n                    component={RouterLink}\r\n                    to={Routes.Home}>\r\n                        { 'Отмена' }\r\n                </Button>\r\n            </Box>\r\n        </Box>\r\n\t);\r\n};\r\n","C:\\dev\\medsurvey\\src\\features\\home\\Home.tsx",["127"],"import React, { FunctionComponent } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\nimport { Button, Paper, Theme } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\n\r\nimport { Routes } from '../../Routes';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n\tnavigationButton: {\r\n        padding: theme.spacing(3),\r\n        margin: theme.spacing(2),\r\n        width: '80%',\r\n        maxWidth: '80%'\r\n    },\r\n    paperRoot: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        height: '100%',\r\n        width: '100%',\r\n        alignItems: 'center'\r\n    }\r\n}));\r\n\r\ninterface HomeProps {\r\n}\r\n\r\nexport const Home: FunctionComponent<HomeProps> = ({}: HomeProps) => {\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n    \t<Paper id={'home-paper'} elevation={3} classes={{ root: classes.paperRoot }}>\r\n            <Button\r\n                className={classes.navigationButton}\r\n                variant='outlined'\r\n                color='primary'\r\n                startIcon={<PersonAddIcon />}\r\n                component={RouterLink}\r\n                to={Routes.PatientForm}>\r\n                { 'Ввести данные пациента' }\r\n            </Button>\r\n            <Button\r\n                className={classes.navigationButton}\r\n                variant='outlined'\r\n                color='primary'\r\n                startIcon={<PeopleIcon />}\r\n                component={RouterLink}\r\n                to={Routes.PatientsList}>\r\n                { 'Список пациентов' }\r\n            </Button>\r\n\t\t</Paper>\r\n\t);\r\n};\r\n","C:\\dev\\medsurvey\\src\\rootSaga.ts",[],"C:\\dev\\medsurvey\\src\\features\\patientForm\\patientFormSlice.ts",[],"C:\\dev\\medsurvey\\src\\features\\patientForm\\constants.ts",[],"C:\\dev\\medsurvey\\src\\features\\patientForm\\selectors.ts",[],"C:\\dev\\medsurvey\\src\\features\\patientForm\\sagas\\rootPatientFormSaga.ts",[],"C:\\dev\\medsurvey\\src\\features\\patientForm\\sagas\\savePatientFormDataSaga.ts",[],"C:\\dev\\medsurvey\\src\\app\\messageControl.ts",[],"C:\\dev\\medsurvey\\src\\features\\patientsList\\PatientDetailsRow.tsx",[],"C:\\dev\\medsurvey\\src\\app\\constants.ts",[],"C:\\dev\\medsurvey\\src\\features\\patientsList\\constants.ts",[],"C:\\dev\\medsurvey\\src\\features\\patientsList\\InfluencingFactorIcon.tsx",[],"C:\\dev\\medsurvey\\src\\app\\utils.ts",[],"C:\\dev\\medsurvey\\src\\features\\patientForm\\patientFormViewSlice.ts",[],"C:\\dev\\medsurvey\\src\\features\\patientsList\\patientsListSlice.ts",[],"C:\\dev\\medsurvey\\src\\features\\patientsList\\sagas\\rootPatientListSaga.ts",[],"C:\\dev\\medsurvey\\src\\features\\patientsList\\sagas\\deletePatientSaga.ts",[],["128","129"],"C:\\dev\\medsurvey\\src\\features\\patientsList\\selectors.ts",[],{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":42,"column":68,"nodeType":"136","messageId":"137","endLine":42,"endColumn":90},{"ruleId":"134","severity":1,"message":"135","line":98,"column":66,"nodeType":"136","messageId":"137","endLine":98,"endColumn":86},{"ruleId":"134","severity":1,"message":"135","line":31,"column":52,"nodeType":"136","messageId":"137","endLine":31,"endColumn":65},{"ruleId":"130","replacedBy":"138"},{"ruleId":"132","replacedBy":"139"},"no-native-reassign",["140"],"no-negated-in-lhs",["141"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected",["140"],["141"],"no-global-assign","no-unsafe-negation"]